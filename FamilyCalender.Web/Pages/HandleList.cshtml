@page "{listId:int}"
@using FamilyCalender.Core.Models.Entities
@model FamilyCalender.Web.Pages.HandleListModel
@{
	ViewData["Title"] = "Hantera lista";
	var undoneItems = Model.Items.Where(i => i.State != ListItemTypeEnum.Checked)
									.OrderByDescending(i => i.SortOrder)
									.ToList();

	var doneItems = Model.Items.Where(i => i.State == ListItemTypeEnum.Checked)
										.ToList();
	bool isTodoList = Model.UserList?.Type == ListTypeEnum.Todolist;

}

<div id="anti-forgery-token">
	@Html.AntiForgeryToken()
</div>
<div class="d-block d-md-none">
	<a asp-page="/CalendarOverview"
	   asp-route-calendarId="@Model.UserList.CalendarId"
	   class="btn btn-pmf fixed-btn"
	   title="Tillbaka till kalendern">
		<i class="fa-regular fa-calendar-alt"></i>


	</a>
</div>
<h1>@Model.UserList?.Name</h1>

<a asp-page="/ListPage" asp-route-calendarId="@Model.UserList.CalendarId" asp-route-calendarName="@Model.CalendarName" class="btn btn-outline-dark btn-sm">
	<i class="bi bi-arrow-left"></i> Tillbaka

</a>

<hr />

@if (Model.UserList is null)
{
	<p class="text-danger">Listan kunde inte hittas.</p>
	return;
}

<form method="post" id="add-item-form">
	<input type="hidden" asp-for="ListId" />
	<div class="d-flex align-items-start gap-2">
		<div class="flex-grow-1">
			<input type="text" class="form-control" asp-for="NewItemName" id="new-item-name" placeholder="Ny punkt" onfocus="this.placeholder=''" onblur="this.placeholder='Ny punkt'" />
			<div id="validation-message" class="text-danger small mt-1"></div>
		</div>
		<input type="hidden" asp-for="CalendarName" />
		<button type="submit" class="btn btn-pmf" asp-page-handler="AddItem"><i class="fa fa-plus"></i></button>
	</div>
</form>

<button type="button" class="btn btn-pmf-outline btn-sm my-2" id="reset-checkboxes" data-bs-toggle="modal" data-bs-target="#confirmResetModal">
	<i class="bi bi-arrow-counterclockwise"></i> Återställ lista
</button>

<div id="list-container">
	@if (Model.Items.Any())
	{
		<div id="todo-lists">
			@if (isTodoList && undoneItems.Any())
			{
				<h2 class="mt-4" id="undone-heading">Att göra</h2>
				<ul class="list-group mb-3" id="undone-list" data-list-id="@Model.UserList.Id">
					@foreach (var item in undoneItems)
					{
						<li class="list-group-item d-flex justify-content-between align-items-center" style="cursor: grab;" data-item-id="@item.Id">
							<!-- Vänster sektion: delete och label -->
							<div class="d-flex align-items-center flex-grow-1">
								<button class="border-0 bg-transparent delete-item me-2 text-danger"
										data-item-id="@item.Id"
										style="cursor: pointer; font-size: 1.3rem;"
										aria-label="Ta bort">
									<i class="bi bi-trash"></i>
								</button>

								<label class="form-check-label @(item.State == ListItemTypeEnum.Checked ? "text-decoration-line-through text-muted" : "") mb-0"
									   for="check-@item.Id"
									   style="cursor: pointer;">
									@item.Name
								</label>
							</div>

							<!-- Höger sektion: checkbox och drag-handle -->
							<div class="d-flex align-items-center">
								<input class="form-check-input toggle-complete me-2 mb-1"
									   type="checkbox"
									   data-item-id="@item.Id"
									   id="check-@item.Id"
									   style="cursor: pointer;"
									   @(item.State == ListItemTypeEnum.Checked ? "checked" : "")>

								<span class="text-muted ms-1" style="cursor: grab;">☰</span>
							</div>
						</li>
					}
				</ul>
			}

			@if (isTodoList && doneItems.Any())
			{
				<h2 class="mt-4" id="done-heading">Klart</h2>
				<ul class="list-group mb-3" id="done-list" data-list-id="@Model.UserList.Id">
					@foreach (var item in doneItems)
					{
						<li class="list-group-item d-flex justify-content-between align-items-center" style="cursor: grab;" data-item-id="@item.Id">
							<!-- Vänster sektion: delete och label -->
							<div class="d-flex align-items-center flex-grow-1">
								<button class="border-0 bg-transparent delete-item me-2 text-danger"
										data-item-id="@item.Id"
										style="cursor: pointer; font-size: 1.3rem;"
										aria-label="Ta bort">
									<i class="bi bi-trash"></i>
								</button>

								<label class="form-check-label @(item.State == ListItemTypeEnum.Checked ? "text-decoration-line-through text-muted" : "") mb-0"
									   for="check-@item.Id"
									   style="cursor: pointer;">
									@item.Name
								</label>
							</div>

							<!-- Höger sektion: checkbox och drag-handle -->
							<div class="d-flex align-items-center">
								<input class="form-check-input toggle-complete me-2 mb-1"
									   type="checkbox"
									   data-item-id="@item.Id"
									   id="check-@item.Id"
									   style="cursor: pointer;"
									   @(item.State == ListItemTypeEnum.Checked ? "checked" : "")>

								<span class="text-muted ms-1" style="cursor: grab;">☰</span>
							</div>
						</li>
					}
				</ul>
			}

			@if (!isTodoList)
			{
				<h2 class="mt-4" id="heading-checklist"><i class="bi bi-ui-checks-grid"></i></h2>
				<ul class="list-group mb-3" id="sortableCheckList" data-list-id="@Model.UserList.Id">
					@foreach (var item in Model.Items.OrderByDescending(i => i.SortOrder))
					{
						<li class="list-group-item d-flex justify-content-between align-items-center" style="cursor: grab;" data-item-id="@item.Id">
							<!-- Vänster: delete-knapp och text -->
							<div class="d-flex align-items-center flex-grow-1">
								<button class="border-0 bg-transparent delete-item me-2 text-danger"
										data-item-id="@item.Id"
										style="cursor: pointer; font-size: 1.3rem;"
										aria-label="Ta bort">
									<i class="bi bi-trash"></i>
								</button>

								<span class="list-item-text @(item.State == ListItemTypeEnum.Checked ? "text-decoration-line-through text-muted" : "") mb-0"
									  contenteditable="true"
									  data-item-id="@item.Id"
									  style="cursor: text;">
									@item.Name
								</span>
							</div>

							<!-- Höger: checkbox och drag-handle -->
							<div class="d-flex align-items-center">
								<input class="form-check-input toggle-complete me-2 mb-1"
									   type="checkbox"
									   data-item-id="@item.Id"
									   id="check-@item.Id"
									   style="cursor: pointer;"
									   @(item.State == ListItemTypeEnum.Checked ? "checked" : "")>

								<span class="text-muted ms-1" style="cursor: grab;">☰</span>
							</div>
						</li>
					}
				</ul>
			}

		</div>
	}
</div>


<!-- Modal for removing item -->
<div class="modal fade" id="confirmDeleteItemModal" tabindex="-1" aria-labelledby="confirmDeleteItemLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="confirmDeleteItemLabel">Bekräfta borttagning</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Stäng"></button>
			</div>
			<div class="modal-body">
				<p>Är du säker på att du vill ta bort punkten <strong id="itemNamePreview"></strong>?</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-pmf" data-bs-dismiss="modal">Avbryt</button>
				<button type="button" class="btn btn-pmf-inverted" id="confirmDeleteItemBtn">Ta bort</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal for reseting checklist -->
<div class="modal fade" id="confirmResetModal" tabindex="-1" aria-labelledby="confirmResetLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="confirmResetLabel">Bekräfta återställning</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Stäng"></button>
			</div>
			<div class="modal-body">
				<p>Vill du verkligen återställa hela listan? Alla punkter kommer att markeras som outförda.</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-pmf" data-bs-dismiss="modal">Avbryt</button>
				<button type="button" class="btn btn-pmf-inverted" id="confirmResetBtn">Återställ</button>
			</div>
		</div>
	</div>
</div>


<script>
	document.addEventListener('DOMContentLoaded', () => {
		// ================================
		// Globala variabler och funktioner
		// ================================

		const isTodoList = '@(Model.UserList.Type.ToString() == "Todolist" ? "true" : "false")' === 'true';

		function updateResetButtonVisibility() {
			const checkedItems = document.querySelectorAll('.toggle-complete:checked');
			const resetBtn = document.getElementById('reset-checkboxes');
			if (resetBtn) {
				resetBtn.style.display = checkedItems.length > 0 ? 'inline-block' : 'none';
			}
		}

		function ensureListAndHeading(type) {
			const container = document.getElementById('list-container');
			if (!container) return null;

			let headingId = type === 'undone' ? 'undone-heading' : 'done-heading';
			let listId = type === 'undone' ? 'undone-list' : 'done-list';
			let headingText = type === 'undone' ? 'Att göra' : 'Klart';

			let heading = document.getElementById(headingId);
			let list = document.getElementById(listId);

			if (!heading) {
				heading = document.createElement('h2');
				heading.id = headingId;
				heading.classList.add('mt-4');
				heading.textContent = headingText;
				container.appendChild(heading);
			}

			if (!list) {
				list = document.createElement('ul');
				list.id = listId;
				list.classList.add('list-group', 'mb-3');
				container.appendChild(list);
			}

			return list;
		}

		function updateHeadingVisibility() {
			['undone', 'done'].forEach(type => {
				const list = document.getElementById(`${type}-list`);
				const heading = document.getElementById(`${type}-heading`);
				if (list && heading) {
					heading.style.display = list.children.length > 0 ? '' : 'none';
				}
			});
		}
			function updateChecklistHeadingVisibility() {
		if (!isTodoList) {
			const checklistHeading = document.getElementById('heading-checklist');
			// Hitta UL:en som hör till checklistan (den första ul efter heading-checklist)
			const checklistUl = checklistHeading?.nextElementSibling;
			if (checklistHeading && checklistUl) {
				checklistHeading.style.display = checklistUl.children.length > 0 ? '' : 'none';
			}
		}
	}

		// =======================
		// Toggle checkbox-status
		// =======================

		document.querySelectorAll('.toggle-complete').forEach(checkbox => {
			checkbox.addEventListener('change', async (e) => {
				const itemId = e.target.dataset.itemId;
				const li = e.target.closest('li');
				const textSpan = li.querySelector('.list-item-text') || li.querySelector('label');

				const response = await fetch('?handler=ToggleItem', {
					method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},					
				body: JSON.stringify({ ItemId: parseInt(itemId) })
				});

				if (!response.ok) {
					console.error('Serverfel:', response.status);
					e.target.checked = !e.target.checked;
					return;
				}

				const result = await response.json();

				if (result.success) {
					if (isTodoList) {
						if (result.newState === 'Checked') {
							textSpan.classList.add('text-decoration-line-through', 'text-muted');
							const doneList = ensureListAndHeading('done');
							doneList.appendChild(li);
						} else {
							textSpan.classList.remove('text-decoration-line-through', 'text-muted');
							const undoneList = ensureListAndHeading('undone');
							undoneList.appendChild(li);
						}
						updateHeadingVisibility();
					} else {
						textSpan.classList.toggle('text-decoration-line-through', result.newState === 'Checked');
						textSpan.classList.toggle('text-muted', result.newState === 'Checked');
					}
				} else {
					alert('Kunde inte uppdatera punkten.');
					e.target.checked = !e.target.checked;
				}
					updateResetButtonVisibility();
			});
		});

		// ===========================
		// Visa/dölj reset-knappen
		// ===========================

		updateResetButtonVisibility();

		// ===========================
		// Nollställ förbockade punkter
		// ===========================

		document.getElementById("confirmResetBtn").addEventListener("click", async function () {
			const checkboxes = document.querySelectorAll(".toggle-complete:checked");

			for (const cb of checkboxes) {
				cb.checked = false;
				cb.dispatchEvent(new Event('change', { bubbles: true }));
			}

			const modal = bootstrap.Modal.getInstance(document.getElementById('confirmResetModal'));
			modal.hide();
		});

		// ===========================
		// Validering vid nytt objekt
		// ===========================

		document.getElementById('add-item-form').addEventListener('submit', function (e) {
			const input = document.getElementById('new-item-name');
			const errorMsg = document.getElementById('validation-message');

			if (!input.value.trim()) {
				e.preventDefault();
				errorMsg.textContent = 'Fältet får inte vara tomt.';
				input.classList.add('is-invalid');
			} else {
				errorMsg.textContent = '';
				input.classList.remove('is-invalid');
			}
		});

		// ===========================
		// Ta bort ett objekt
		// ===========================

		const deleteItemModal = new bootstrap.Modal(document.getElementById('confirmDeleteItemModal'));
		const itemNamePreview = document.getElementById('itemNamePreview');
		const confirmDeleteItemBtn = document.getElementById('confirmDeleteItemBtn');

		let itemToDeleteButton = null;
		let itemToDeleteId = null;

		document.querySelectorAll('.delete-item').forEach(button => {
			button.addEventListener('click', (e) => {
				e.preventDefault();
				itemToDeleteButton = button;
				itemToDeleteId = button.dataset.itemId;

				const li = button.closest('li');
				const label = li.querySelector('label');
				itemNamePreview.textContent = label ? label.textContent.trim() : 'denna punkt';

				deleteItemModal.show();
			});
		});

		confirmDeleteItemBtn.addEventListener('click', async () => {
			if (!itemToDeleteId) return;

			const response = await fetch('?handler=DeleteItem', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify({ itemId: parseInt(itemToDeleteId) })
			});

			const result = await response.json();

			if (result.success) {
				itemToDeleteButton.closest('li').remove();
				if (isTodoList) {
					updateHeadingVisibility();
				} else {
					updateChecklistHeadingVisibility();
				}
				updateResetButtonVisibility();
			} else {
				alert('Kunde inte ta bort punkten.');
			}

			deleteItemModal.hide();
			itemToDeleteButton = null;
			itemToDeleteId = null;
		});

		// ===========================
		// Uppdatera rubriker vid start
		// ===========================
		if (isTodoList) {
			updateHeadingVisibility();
		}
		else {
			updateChecklistHeadingVisibility();
		}
	});

		// ===========================
		// Logik för drag and drop
		// ===========================
	function initSortable(id, updateUrl) {
		const list = document.getElementById(id);
		if (!list) return;

		const listId = list.dataset.listId;

		new Sortable(list, {
			animation: 150,
			delay: 200,
			delayOnTouchOnly: true,
			filter: 'input, button',
			preventOnFilter: false,
			onEnd: function () {
				const sortedIds = Array.from(list.children).map(li => li.dataset.itemId);

			fetch(updateUrl, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
				},
				body: JSON.stringify({ listId: listId, sortedIds: sortedIds })
			})
			.then(response => {
				if (!response.ok) {
					throw new Error('Något gick fel vid uppdatering av ordning');
				}
				return response.json();
			})
			.then(data => {
				if (!data.success) {
					alert('Kunde inte spara ordningen på servern');
				}
			})
			.catch(err => {
				console.error(err);
				alert('Fel vid uppdatering av ordning');
			});
					}
				});
			}

	document.addEventListener('DOMContentLoaded', function () {
		initSortable('sortableCheckList', '@Url.Page("HandleList", "UpdateOrder")');
		initSortable('undone-list', '@Url.Page("HandleList", "UpdateOrder")');
		initSortable('done-list', '@Url.Page("HandleList", "UpdateOrder")');

	});
</script>

